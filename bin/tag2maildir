#! /usr/bin/env ruby
#
# @abstract Find all mail downloaded by gmvault from any given GMail account
#   and create a maildir mailbox
#
# @author Ollivier Robert <roberto@keltia.net>
#
# Read all .eml with a given tag in .meta. Generate a maildir structure
# with all .eml.
#
# @version $Id: tag2maildir,v 779f07ced313 2012/09/06 20:27:05 roberto $

# VCS ID
MYNAME = File.basename($0)
VCS_ID = "$Id: tag2maildir,v 779f07ced313 2012/09/06 20:27:05 roberto $"

require "date"
require "time"
require "json"
require "optparse"

# Non standard packages
#
require "mail"
require "maildir"

# Default config
#
MYBASE = ENV["HOME"] + "/Maildir"

class DataError < Exception; end

class Tag
  # Handles a tag
  #
  # Used when creating a mailbox based on the tag itself, after replacing the "/" used
  # by IMAP by "-"
  attr_accessor :label

  # @param [String] label name of the tag
  # @return [Tag] the newly created tag
  def initialize(label)
    raise DataError if label.nil?

    @label = label
  end

  # Generate a FS-compatible label
  # @return [String] the converted label
  def normalize
    return @label.gsub(%r{/}, '-')
  end
end # -- Tag

# Handle GmVault mails with .eml as raw mail and .meta as metadata (i.e.tags)
#
class GMail
  attr_reader :name
  attr_reader :meta
  attr_reader :mail
  attr_reader :tags

  def initialize(filename)
    @path = filename.split(/\./)[0]
    @name = File.basename(@path)
    @mail = Mail.new
    @tags = []
  end # -- initialize

  # @return[String] returns the mail id
  def load
    File.open(self.meta_path) do |fh|
      @meta = JSON.load(fh)
    end

    # check consistency
    if @name.to_i != @meta["gm_id"] then
      $stderr.puts(@meta)
      raise DataError, "Error: Internal inconsistency on #{@name} vs #{@meta['gm_id']}"
    end

    # Remove "internal tags"
    @tags = @meta['labels'].delete_if {|e| e =~ /^\\\\/ }

    @mail = Mail.read(self.mail_path)
    if @meta['msg_id'] != @mail.message_id then
      raise DataError, "Error: Internal inconsistency on #{@mail.message_id} vs #{@meta['msg_id']}"
    end
    return(@meta["gm_id"])
  end

  # @return[String] returns the full filename to the mail itself
  def mail_path
    @path + ".eml"
  end

  # @return[String] returns full filename of the metadata
  def meta_path
    $stderr.puts(@name)
    @path + ".meta"
  end
end # -- GMail

# Starting point
#
def main(argv)
  my_tag = nil
  my_base = MYBASE

  usage = <<-"EOTEXT"
Usage: #{MYNAME} [-h] -b DIR -t TAG DIR
  EOTEXT

  banner = <<-"EOTEXT"
#{MYNAME}
Revision #{VCS_ID}

#{usage}
  EOTEXT

  argv.options do |opts|
    opts.banner = banner
    opts.on("-b", "--base=DIR", "Use this directory to create mailboxes") do
      |opt_base|
      my_base = opt_base
    end
    opts.on("-d", "--debug", "Don't post directly - DEBUG mode") do
      $debug = true
    end
    opts.on("-t", "--tag=TAG", "Use the following TAG ") do
      |opt_tag|
      my_tag = opt_tag
    end
    opts.on("-h", "Help", "Display this usage") do
      puts banner
      return 255
    end
    opts.parse!
  end

  argv.options = nil
  top_dir = argv.shift

  if top_dir.nil? then
    $stderr.puts("Error: directory where to load mail from must be specified")
    return(1)
  end

  if my_tag.nil? then
    $stderr.puts("Error: the -t TAG option must be specified")
    return(1)
  end

  Dir.chdir(top_dir) do

    tag = Tag.new(my_tag)
    maildir = Maildir.new(my_base + "/#{tag.normalize}")
    maildir.serializer = Maildir::Serializer::Mail.new

    Dir["**/*.eml"].each do |m|
      mail = GMail.new(m).load
      maildir.add(mail)
    end
    puts("Total message in #{tag.normalize}: #{mail.list.length}...")
  end

  return 0
end # -- main

exit(main(ARGV) || 1)
