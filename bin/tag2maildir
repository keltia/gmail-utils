#! /usr/bin/env ruby
#
# @abstract Find all mail downloaded by gmvault from any given GMail account
#   and create a maildir mailbox
#
# @author Ollivier Robert <roberto@keltia.net>
#
# Read all .eml with a given tag in .meta. Generate a maildir structure
# with all .eml.
#
# @version $Id: tag2maildir,v 24b716f83b96 2012/10/26 23:00:43 roberto $

# VCS ID
MYNAME = File.basename($0)
VCS_ID = "$Id: tag2maildir,v 24b716f83b96 2012/10/26 23:00:43 roberto $"

require "date"
require "time"
require "json"
require "optparse"

# Non standard packages
#
require "mail"
require "maildir"

# Default config
#
MYBASE = ENV["HOME"] + "/Maildir"

class DataError < Exception; end

require "gmail"
require "gmail-utils/version"

# Starting point
#
# @param [Array] argv
def main(argv)
  my_tag = nil
  my_base = MYBASE

  usage = <<-"EOTEXT"
Usage: #{MYNAME} [-h] -b DIR -t TAG DIR
  EOTEXT

  banner = <<-"EOTEXT"
#{MYNAME} v#{GMail::Utils::VERSION}

#{usage}
  EOTEXT

  argv.options do |opts|
    opts.banner = banner
    opts.on("-b", "--base=DIR", "Use this directory to create mailboxes") do
      |opt_base|
      my_base = opt_base
    end
    opts.on("-d", "--debug", "Don't post directly - DEBUG mode") do
      $debug = true
    end
    opts.on("-t", "--tag=TAG", "Use the following TAG ") do
      |opt_tag|
      my_tag = opt_tag
    end
    opts.on("-h", "Help", "Display this usage") do
      puts banner
      return 255
    end
    opts.parse!
  end

  argv.options = nil
  top_dir = argv.shift

  if top_dir.nil?
    $stderr.puts("Error: directory where to load mail from must be specified")
    return(1)
  end

  if my_tag.nil?
    $stderr.puts("Error: the -t TAG option must be specified")
    return(1)
  end

  tag = nil
  Dir.chdir(top_dir) do

    t1 = t2 = 0
    tag = GMail::Tag.new(my_tag)
    maildir = Maildir.new("#{my_base}/#{tag}")
    maildir.serializer = Maildir::Serializer::Mail.new
    puts("Opening maildir at #{my_base}/#{tag}")

    index = GMail::Index.new("#{my_base}/#{tag}")
    start = index.last_id.to_i
    index.gmdb = top_dir
    last_id = start

    puts("Opening index, last id is #{last_id}, #{index.size} mails present")
    puts("+: already seen / H: already in index / T: match tag / .: unseen, no match")

    added = 0
    skipped = 0
    already = 0
    t1 = Time.now
    begin
      Dir["**/*.meta"].each do |m|
        #
        # In order to avoid opening and reading lots of file, use the fact that filenames are gm_ids
        #
        f_m = File.basename(m).split(%r{\.})[0]
        if f_m.to_i <= start
          skipped += 1
        else
          # load metadata
          #
          gm = GMail::Entity.new(m)

          # not in index
          #
          if tag.match(gm.tags)
            # match, insert and put into index
            #
            if index.present?(gm.gm_id)
              already += 1
              print("H")
            else
              gm.mail.header["X-Label"] = gm.tags.join(',')
              msg = maildir.add(gm.mail)
              index[gm.gm_id] = msg.key
              added += 1
              print("T")
            end
          else
            # no match
            #
            print(".")
          end
          last_id = gm.gm_id.to_i
        end
      end
      t2 = Time.now
      # Update 'last_id' field in db
      #
      index.last_id = last_id
    rescue => msg
      puts("Interrupted: #{msg}")
    end

    puts <<"EOTEXT"

Total messages in #{tag}:
  #{maildir.list(:cur).length} old, #{maildir.list(:new).length} new, #{added} added in #{t2 - t1} s, #{already} already there, #{skipped} skipped.
EOTEXT
  end

  0
end # -- main

exit(main(ARGV) || 1)
